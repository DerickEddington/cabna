; Brainstorm -- What could a parallel evaluation of procedure arguments compile to?
; Expression: ((a) (task-arg1 (b 1)))

  jmp_ret alloc_task
  mov [arg2_r9 + task.need], 2
  mov t1, [cet_r14 + task.rcvr]
  mov [arg2_r9 + task.rcvr], t1
  mov t1, [cet_r14 + task.ridx]
  mov [arg2_r9 + task.ridx], t1
  mov t1, arg2_r9

  jmp_ret alloc_task
  mov [arg2_r9 + task.exec], a
  ;mov [arg2_r9 + task.need], 0  ; Not needed because task gets enqueued already.
  mov [arg2_r9 + task.rcvr], t1
  mov [arg2_r9 + task.ridx], 0   ; ridx 0 is rcvr's exec field
  jmp_ret enqueue_task  ; arg2_r9 already set

  jmp_ret alloc_task
  mov t2, [cet_r14 + task.arg1]
  mov [arg2_r9 + task.exec], t2
  mov [arg2_r9 + task.need], 1
  mov [arg2_r9 + task.rcvr], t1
  mov [arg2_r9 + task.ridx], 1  ; ridx 1 is rcvr's arg1 field
  mov t2, arg2_r9

  jmp_ret alloc_task
  mov [arg2_r9 + task.exec], b
  ;mov [arg2_r9 + task.need], 0
  mov [arg2_r9 + task.rcvr], t2
  mov [arg2_r9 + task.ridx], 1
  mov [arg2_r9 + task.arg1], 1

  mov ret_r13, free_pet__exec_avail  ; Make enqueue_task return to this.
  jmp enqueue_task  ; arg2_r9 already set




; Brainstorm -- What could returning a value to a waiting task, and checking if
; the waiting task is ready to be queued, and deallocating the currently
; executing task, compile to?  E.g. the b call above.  (define (b n) (+ 7 n))
b:
  mov arg1_r8, [cet_r14 + task.arg1]
  add arg1_r8, 7
  jmp supply_retval  ; arg1_r8 already set

