(define (quicksort! v)
  (define (qs s e)
    (define (partition)
      (let ((p (vector-ref v s)))
        (define (left l r)
          (if (< l r)
            (let ((x (vector-ref v (+ 1 l))))
              (if (< x p)
                (begin (vector-set! v l x)
                       (left (+ 1 l) r))
                (right l r x)))
            l))
        (define (right l r x)
          (if (< l r)
            (let ((y (vector-ref v r)))
              (if (< y p)
                (begin (vector-set! v l y)
                       (vector-set! v r x)
                       (left (+ 1 l) (- r 1)))
                (right l (- r 1) x)))
            l))
        (let ((i (left s (- e 1))))
          (vector-set! v i p)
          i)))
    (when (< s (- e 1))
      (let ((i (partition)))
        (qs s i)
        (qs (+ 1 i) e))))
  (qs 0 (vector-length v))
  v)

(define (test-vector size)
    (let ((v (make-vector))
          (m (floor (/ size 2))))
      (vector-set! v 0 m)
      TODO: distribute values such that quicksort is excercised balancedly))