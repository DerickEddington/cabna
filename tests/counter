global main

%include "cabna/iface"

%assign count 100_000_000


section .text


proc main:  ; (done (a n))
  jmp_ret alloc_task
  mov qword [arg1_rdi + task.exec], done
  mov qword [arg1_rdi + task.need], 1
  mov rbx, arg1_rdi

  jmp_ret alloc_task
  mov qword [arg1_rdi + task.exec], a
  mov qword [arg1_rdi + task.arg1], count
  mov [arg1_rdi + task.rcvr], rbx
  mov qword [arg1_rdi + task.ridx], 1
  jmp_ret_to sched_task, exec_avail  ; arg1_rdi already set


proc done:  ; Exit program.
  stat call print_stats
  mov rdi, [cet_r14 + task.arg1]
  mov eax, 231  ; exit_group syscall number
  syscall



; (define (a n) (b (- n 1)))
proc a:
  jmp_ret alloc_task
  mov qword [arg1_rdi + task.exec], b

  mov rax, [cet_r14 + task.arg1]
  sub rax, 1
  mov [arg1_rdi + task.arg1], rax

  mov rax, [cet_r14 + task.rcvr]
  mov [arg1_rdi + task.rcvr], rax
  mov rax, [cet_r14 + task.ridx]
  mov [arg1_rdi + task.ridx], rax

  jmp_ret_to sched_task, free_pet__exec_avail  ; arg1_rdi already set



; (define (b n) (c (- n 2)))
proc b:
  jmp_ret alloc_task
  mov qword [arg1_rdi + task.exec], c

  mov rax, [cet_r14 + task.arg1]
  sub rax, 2
  mov [arg1_rdi + task.arg1], rax

  mov rax, [cet_r14 + task.rcvr]
  mov [arg1_rdi + task.rcvr], rax
  mov rax, [cet_r14 + task.ridx]
  mov [arg1_rdi + task.ridx], rax

  jmp_ret_to sched_task, free_pet__exec_avail  ; arg1_rdi already set



; (define (c n) (if (<= n 0) n (a n)))
proc c:
  mov arg1_rdi, [cet_r14 + task.arg1]
  test arg1_rdi, arg1_rdi
  mov esi, free_pet__exec_avail
  unlikely jle supply_retval

  mov rbx, arg1_rdi

  jmp_ret alloc_task
  mov qword [arg1_rdi + task.exec], a

  mov [arg1_rdi + task.arg1], rbx

  mov rax, [cet_r14 + task.rcvr]
  mov [arg1_rdi + task.rcvr], rax
  mov rax, [cet_r14 + task.ridx]
  mov [arg1_rdi + task.ridx], rax

  jmp_ret_to sched_task, free_pet__exec_avail  ; arg1_rdi already set
