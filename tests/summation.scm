(library (summation)
  (export main main* allocs)
  (import (rnrs))
  (define (main s e)
    (cond ((>= s e)       s)
          ((= s (- e 1))  (+ s e))
          (else           (let ((x (floor (/ (+ s e) 2))))
                            (+ (main s x) (main (+ 1 x) e))))))
  (define (main* s e)
    (let loop ((s s) (a 0))
      (if (< s e)
        (loop (+ 1 s) (+ a s))
        (+ a s))))
  (define (allocs s e)
    (define (f s e)
      (if (< (+ 1 s) e)
        (let ((x (floor (/ (+ s e) 2))))
          (+ 2 (f s x) (f (+ 1 x) e)))
        0))
    (+ 2 (f s e))))

