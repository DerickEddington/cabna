Investigate redesigning executable-tasks sharing.  Current design is susceptible
to not sharing work, because OS scheduling can prevent a thread from running and
indicating it's needy until too late after another thread kept a task, because
when the other thread checked to give, the needy thread hadn't yet been able to
indicate it's needy.  A needy thread must be able to get an available task
whenever it needs.

Investigate using futuxes to make needy threads suspend so they're not consuming
CPU.

Investigate giving orphans to their owner only when the amount of orphans a
thread holds reaches a limit.  This will avoid doing as many atomic operations.
Various options exist: the limit could be per-owner; orphans could be returned
to their owner in a batch; sorting by owner seems necessary for the previous two
options.

Investigate if changing dword to qword where possible in impl affects
performance, and about changing 32-bit ops to 64-bit.

Investigate having cache_line_size for alignment, instead of hard-coded 128.
This would allow cache_line_size=64, for CPUs where it's as efficient, which
would result in smaller memory usage.  Does the memory usage need to be a
concern though?

Investigate making amount_threads a runtime function, so that programs
can divide their work based on the amount of threads, instead of dividing their
work too much and suffering excess Cabna overhead.

Investigate changing what are currently preprocessor variables to absolute
symbols in object files, so that other modules don't have to be reassembled and
they just need to be relinked to use updated values.  E.g., for sys/threads, if
amount_threads, call_stack_size, and amount_prealloc_tasks are changed thus,
that module can just be relinked as described.  However, this would require
redesigning the preallocation of things that use amount_threads for preprocessor
evaluation, and perhaps other issues like this.

Test programs don't declare "default rel".  I think they should.

Review adding more comments for new designs.

Rename conv file to ?

Fix preprocessor error messages so the values, not symbols, are printed.

Is (un)likely actually a good idea?  Maybe not portable to other processors.
Seems to screw up objdump disassembly.  Review places to use and performance
difference again.

Redesign summation and quicksort to use amount_threads to divide
their work such that it's not divided too much that excess Cabna overhead is
suffered.  (fibonacci-limited has already been redesigned such.)

Determine the stack size given to the initial thread.  Decide what size to give
other threads.  Minimum is 16384 (16 kb, 4 pages).

Review the optimization guideline points again.

Make a simple Scheme-like interpreter written in assembly and using the task
queueing and execution facilities.  I think this is an easy step towards using
the parallel processing without having a compiler.  Useful parallel programs
(including a compiler) can be interpreted.

Get rid of "bug" module.

Investigate supporting potential use of Cabna chunks, and their memory
management, by users' programs as fundamental memory unit, similar to
FreshBreeze.  This seems desirable because programs that want to do such memory
structuring can use the Cabna facility that is concurrency-safe. -- But the
current task/chunk allocator does not support freeing memory back to the OS,
because supporting that would add a lot of complexity.

Investigate what NASM directives are neccessary to make a shared library.

Investigate the performance difference of using common stack-based call/ret
instead of jmp_ret for Cabna procedures.  If the difference is neglegible, it
seems good to use Unix ABI calling convention so that other languages can call
Cabna procedures, which could be useful to some users.

Investigate supporting non-concurrent task execution, so that tasks can be
called without enqueueing in the exec queue and so that they return to the
caller, like common stack calling.  Is it even possible while also having the
task-enqueueing and task-taking concurrency design?  User procedures would have
to change so that it is dynamically parameterizable whether they enqueue tasks
or directly call them, otherwise directly-called procedures won't be done until
their enqueued sub-tasks are done, which won't happen until some thread(s)
dequeue and completely execute the sub-tasks, which will block the
direct-caller.  It's possible to have a register determine whether enqueue_task
or exec_task_directly is used for sub-tasks, but is it possible to generally
have a register determine whether a task continues to exec_avail or
free_pet__exec_avail or return_to_caller?  Supporting this would require using
call and ret and the stack, to allow nested direct procedure calls, otherwise
ret_rsi will be destroyed by calls in procedures' dynamic extents.  Supporting
this would, I think, require using a field of the currently executing task struc
for the return value of the directly-called procedure, i.e. the CET is the
receiver of the DCP so that the DCP can return its value in the same manner
regardless of whether it's called directly or executed from the queue; but, for
queued execution, when the CET is reused, it must be reused before the sub-tasks
are setup, but for direct calling it must be reused after so that it can be used
to receive the DCP's return value ???  ... However: maybe it's better for DCPs
to mot be tasks nor use the task execution facilities, but instead use common
stack-based call/ret.

Analyze object files / assembly / machine code again.
