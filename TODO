When there's nothing for a thread to do, they'll spin a lot, so should a pause
instruction be used somewhere in the spin?

Review the optimization guidline points again.

Do some testing with only one thread, before implementing multiple threads.

Implement thread creation per number of processors, at program start-up.  This
will allow exploring parallelism, even though the thread creation design might
change in the future.  I think using Linux's clone is the way to go.

Make a simple Scheme-like interpreter written in assembly and using the task
queueing and execution facilities.  I think this is an easy step towards using
the parallel processing without having a compiler.  Useful parallel programs
(including a compiler) can be interpreted.

Investigate what NASM directives are neccessary to make a shared library.
